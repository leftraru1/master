using BL.Modelos;
using EL.DTO;
using PL.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;

namespace PL.Controllers
{
    [AutorizeSession]
    public class PerfilController : Controller
    {
        
        private static MPerfil modelo { get; set; }

        public PerfilController()
        {
            modelo = new MPerfil();
        }

        public ActionResult Index()
        {
            return View();
        }

        public JsonResult BuscarTodos()
        {

            List<DTOPerfil> perfiles = new List<DTOPerfil>();

            try
            {
                perfiles = modelo.BuscarPerfiles();
                Response.StatusCode = (int)HttpStatusCode.OK;
            }
            catch (Exception ex)
            {
                Response.StatusCode = (int)HttpStatusCode.InternalServerError;
                Response.StatusDescription = ex.Message.Replace("\r", "").Replace("\n", "").Replace("\t", "").Replace("\v", "").Replace("\f", "").ToString();
            }

            return new JsonResult { JsonRequestBehavior = JsonRequestBehavior.AllowGet, Data = perfiles };
        }

        public JsonResult BuscarPerfil(int id)
        {

            DTOPerfil perfil = new DTOPerfil();

            try
            {
                perfil = modelo.BuscarPerfil(id);
                Response.StatusCode = (int)HttpStatusCode.OK;
            }
            catch (Exception ex)
            {
                Response.StatusCode = (int)HttpStatusCode.InternalServerError;
                Response.StatusDescription = ex.Message.Replace("\r", "").Replace("\n", "").Replace("\t", "").Replace("\v", "").Replace("\f", "").ToString();
            }

            return new JsonResult { JsonRequestBehavior = JsonRequestBehavior.AllowGet, Data = perfil };
        }

        public JsonResult BuscarVigentes()
        {

            List<DTOPerfil> perfiles = new List<DTOPerfil>();

            try
            {
                perfiles = modelo.BuscarPerfilesVigentes();
                Response.StatusCode = (int)HttpStatusCode.OK;
            }
            catch (Exception ex)
            {
                Response.StatusCode = (int)HttpStatusCode.InternalServerError;
                Response.StatusDescription = ex.Message.Replace("\r", "").Replace("\n", "").Replace("\t", "").Replace("\v", "").Replace("\f", "").ToString();
            }

            return new JsonResult { JsonRequestBehavior = JsonRequestBehavior.AllowGet, Data = perfiles };
        }

        [HttpDelete]
        public async Task<JsonResult> EliminarPerfil(int id)
        {

            try
            {
                await modelo.Eliminar(id);
                Response.StatusCode = (int)HttpStatusCode.OK;
            }
            catch (Exception ex)
            {
                Response.StatusCode = (int)HttpStatusCode.InternalServerError;
                Response.StatusDescription = ex.Message.Replace("\r", "").Replace("\n", "").Replace("\t", "").Replace("\v", "").Replace("\f", "").ToString();
            }

            return new JsonResult { JsonRequestBehavior = JsonRequestBehavior.AllowGet, Data = new object[] { new object() } };
        }

        [HttpPost]
        public async Task<JsonResult> GuardarPerfil(DTOPerfil perfil)
        {
            int id = 0;
            try
            {
                id = await modelo.Guardar(perfil);
                Response.StatusCode = (int)HttpStatusCode.OK;
            }
            catch (Exception ex)
            {
                Response.StatusCode = (int)HttpStatusCode.InternalServerError;
                Response.StatusDescription = ex.Message.Replace("\r", "").Replace("\n", "").Replace("\t", "").Replace("\v", "").Replace("\f", "").ToString();
            }

            return new JsonResult { JsonRequestBehavior = JsonRequestBehavior.AllowGet, Data = id };
        }

    }
}